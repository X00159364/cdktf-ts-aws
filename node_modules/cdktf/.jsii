{
  "author": {
    "name": "HashiCorp",
    "roles": [
      "author"
    ],
    "url": "https://hashicorp.com"
  },
  "bundled": {
    "json-stable-stringify": "^1.0.1"
  },
  "dependencies": {
    "constructs": "^3.0.0"
  },
  "dependencyClosure": {
    "constructs": {
      "targets": {
        "dotnet": {
          "namespace": "Constructs",
          "packageId": "Constructs"
        },
        "java": {
          "maven": {
            "artifactId": "constructs",
            "groupId": "software.constructs"
          },
          "package": "software.constructs"
        },
        "js": {
          "npm": "constructs"
        },
        "python": {
          "distName": "constructs",
          "module": "constructs"
        }
      }
    }
  },
  "description": "Cloud Development Kit for Terraform",
  "docs": {
    "stability": "experimental"
  },
  "homepage": "https://github.com/hashicorp/terraform-cdk",
  "jsiiVersion": "1.14.0",
  "license": "MPL-2.0",
  "metadata": {
    "jsii": {
      "pacmak": {
        "hasDefaultInterfaces": true
      }
    }
  },
  "name": "cdktf",
  "readme": {
    "markdown": "# cdktf\n\ncdktf is a framework for defining cloud infrastructure using Terraform providers and modules. It allows for\nusers to define infrastructure resources using higher-level programming languages.\n\n## Build\n\nInstall dependencies\n\n```bash\nyarn install\n```\n\nBuild the package\n\n```bash\nyarn build\n```\n"
  },
  "repository": {
    "directory": "packages/cdktf",
    "type": "git",
    "url": "https://github.com/hashicorp/terraform-cdk.git"
  },
  "schema": "jsii/0.10.0",
  "targets": {
    "java": {
      "maven": {
        "artifactId": "cdktf",
        "groupId": "com.hashicorp"
      },
      "package": "com.hashicorp.cdktf"
    },
    "js": {
      "npm": "cdktf"
    },
    "python": {
      "distName": "cdktf",
      "module": "cdktf"
    }
  },
  "types": {
    "cdktf.App": {
      "assembly": "cdktf",
      "base": "constructs.Construct",
      "docs": {
        "stability": "experimental",
        "summary": "Represents a cdktf application."
      },
      "fqn": "cdktf.App",
      "initializer": {
        "docs": {
          "stability": "experimental",
          "summary": "Defines an app."
        },
        "locationInModule": {
          "filename": "lib/app.ts",
          "line": 41
        },
        "parameters": [
          {
            "docs": {
              "summary": "configuration options."
            },
            "name": "options",
            "optional": true,
            "type": {
              "fqn": "cdktf.AppOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/app.ts",
        "line": 31
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Synthesizes all resources to the output directory."
          },
          "locationInModule": {
            "filename": "lib/app.ts",
            "line": 58
          },
          "name": "synth"
        }
      ],
      "name": "App",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The output directory into which resources will be synthesized."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/app.ts",
            "line": 35
          },
          "name": "outdir",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "cdktf.AppOptions": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.AppOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/app.ts",
        "line": 7
      },
      "name": "AppOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- no additional context",
            "remarks": "Context set by the CLI or the `context` key in `cdktf.json` has precedence.\n\nContext can be read from any construct using `node.getContext(key)`.",
            "stability": "experimental",
            "summary": "Additional context values for the application."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/app.ts",
            "line": 25
          },
          "name": "context",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- CDKTF_OUTDIR if defined, otherwise \"cdktf.out\"",
            "stability": "experimental",
            "summary": "The directory to output Terraform resources."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/app.ts",
            "line": 13
          },
          "name": "outdir",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/app.ts",
            "line": 14
          },
          "name": "stackTraces",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "cdktf.ArtifactoryBackend": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformBackend",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.ArtifactoryBackend",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/artifactory-backend.ts",
          "line": 7
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "cdktf.ArtifactoryBackendProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/artifactory-backend.ts",
        "line": 6
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/backends/artifactory-backend.ts",
            "line": 11
          },
          "name": "synthesizeAttributes",
          "overrides": "cdktf.TerraformBackend",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "ArtifactoryBackend"
    },
    "cdktf.ArtifactoryBackendProps": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.ArtifactoryBackendProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/artifactory-backend.ts",
        "line": 22
      },
      "name": "ArtifactoryBackendProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/artifactory-backend.ts",
            "line": 24
          },
          "name": "password",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/artifactory-backend.ts",
            "line": 26
          },
          "name": "repo",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/artifactory-backend.ts",
            "line": 27
          },
          "name": "subpath",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/artifactory-backend.ts",
            "line": 25
          },
          "name": "url",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/artifactory-backend.ts",
            "line": 23
          },
          "name": "username",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "cdktf.AzurermBackend": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformBackend",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.AzurermBackend",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/azurerm-backend.ts",
          "line": 7
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "cdktf.AzurermBackendProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/azurerm-backend.ts",
        "line": 6
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/backends/azurerm-backend.ts",
            "line": 11
          },
          "name": "synthesizeAttributes",
          "overrides": "cdktf.TerraformBackend",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "AzurermBackend"
    },
    "cdktf.AzurermBackendProps": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.AzurermBackendProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/azurerm-backend.ts",
        "line": 22
      },
      "name": "AzurermBackendProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/azurerm-backend.ts",
            "line": 24
          },
          "name": "containerName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/azurerm-backend.ts",
            "line": 25
          },
          "name": "key",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/azurerm-backend.ts",
            "line": 23
          },
          "name": "storageAccountName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/azurerm-backend.ts",
            "line": 33
          },
          "name": "accessKey",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/azurerm-backend.ts",
            "line": 35
          },
          "name": "clientId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/azurerm-backend.ts",
            "line": 36
          },
          "name": "clientSecret",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/azurerm-backend.ts",
            "line": 27
          },
          "name": "endpoint",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/azurerm-backend.ts",
            "line": 26
          },
          "name": "environment",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/azurerm-backend.ts",
            "line": 30
          },
          "name": "msiEndpoint",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/azurerm-backend.ts",
            "line": 34
          },
          "name": "resourceGroupName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/azurerm-backend.ts",
            "line": 32
          },
          "name": "sasToken",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/azurerm-backend.ts",
            "line": 28
          },
          "name": "subscriptionId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/azurerm-backend.ts",
            "line": 29
          },
          "name": "tenantId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/azurerm-backend.ts",
            "line": 31
          },
          "name": "useMsi",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "cdktf.BooleanMap": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.BooleanMap",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/complex-computed-list.ts",
          "line": 43
        },
        "parameters": [
          {
            "name": "terraformResource",
            "type": {
              "fqn": "cdktf.ITerraformResource"
            }
          },
          {
            "name": "terraformAttribute",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/complex-computed-list.ts",
        "line": 42
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 45
          },
          "name": "lookup",
          "parameters": [
            {
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          }
        }
      ],
      "name": "BooleanMap",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 43
          },
          "name": "terraformAttribute",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 43
          },
          "name": "terraformResource",
          "protected": true,
          "type": {
            "fqn": "cdktf.ITerraformResource"
          }
        }
      ]
    },
    "cdktf.ComplexComputedList": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.ComplexComputedList",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/complex-computed-list.ts",
          "line": 51
        },
        "parameters": [
          {
            "name": "terraformResource",
            "type": {
              "fqn": "cdktf.ITerraformResource"
            }
          },
          {
            "name": "terraformAttribute",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "index",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/complex-computed-list.ts",
        "line": 50
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 19
          },
          "name": "getBooleanAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 15
          },
          "name": "getListAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 11
          },
          "name": "getNumberAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 7
          },
          "name": "getStringAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 55
          },
          "name": "interpolationForAttribute",
          "parameters": [
            {
              "name": "property",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "ComplexComputedList",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 51
          },
          "name": "index",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 51
          },
          "name": "terraformAttribute",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 51
          },
          "name": "terraformResource",
          "protected": true,
          "type": {
            "fqn": "cdktf.ITerraformResource"
          }
        }
      ]
    },
    "cdktf.ConsulBackend": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformBackend",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.ConsulBackend",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/consul-backend.ts",
          "line": 7
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "cdktf.ConsulBackendProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/consul-backend.ts",
        "line": 6
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/backends/consul-backend.ts",
            "line": 11
          },
          "name": "synthesizeAttributes",
          "overrides": "cdktf.TerraformBackend",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "ConsulBackend"
    },
    "cdktf.ConsulBackendProps": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.ConsulBackendProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/consul-backend.ts",
        "line": 22
      },
      "name": "ConsulBackendProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/consul-backend.ts",
            "line": 24
          },
          "name": "accessToken",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/consul-backend.ts",
            "line": 23
          },
          "name": "path",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/consul-backend.ts",
            "line": 25
          },
          "name": "address",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/consul-backend.ts",
            "line": 31
          },
          "name": "caFile",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/consul-backend.ts",
            "line": 32
          },
          "name": "certFile",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/consul-backend.ts",
            "line": 27
          },
          "name": "datacenter",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/consul-backend.ts",
            "line": 29
          },
          "name": "gzip",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/consul-backend.ts",
            "line": 28
          },
          "name": "httpAuth",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/consul-backend.ts",
            "line": 33
          },
          "name": "keyFile",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/consul-backend.ts",
            "line": 30
          },
          "name": "lock",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/consul-backend.ts",
            "line": 26
          },
          "name": "scheme",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "cdktf.CosBackend": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformBackend",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.CosBackend",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/cos-backend.ts",
          "line": 7
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "cdktf.CosBackendProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/cos-backend.ts",
        "line": 6
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/backends/cos-backend.ts",
            "line": 11
          },
          "name": "synthesizeAttributes",
          "overrides": "cdktf.TerraformBackend",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "CosBackend"
    },
    "cdktf.CosBackendProps": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.CosBackendProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/cos-backend.ts",
        "line": 22
      },
      "name": "CosBackendProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/cos-backend.ts",
            "line": 26
          },
          "name": "bucket",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/cos-backend.ts",
            "line": 30
          },
          "name": "acl",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/cos-backend.ts",
            "line": 29
          },
          "name": "encrypt",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/cos-backend.ts",
            "line": 28
          },
          "name": "key",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/cos-backend.ts",
            "line": 27
          },
          "name": "prefix",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/cos-backend.ts",
            "line": 25
          },
          "name": "region",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/cos-backend.ts",
            "line": 23
          },
          "name": "secretId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/cos-backend.ts",
            "line": 24
          },
          "name": "secretKey",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "cdktf.DataTerraformRemoteState": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformRemoteState",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteState",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/remote-backend.ts",
          "line": 17
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.DataTerraformRemoteStateRemoteConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/remote-backend.ts",
        "line": 16
      },
      "name": "DataTerraformRemoteState"
    },
    "cdktf.DataTerraformRemoteStateArtifactory": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformRemoteState",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateArtifactory",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/artifactory-backend.ts",
          "line": 17
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.DataTerraformRemoteStateArtifactoryConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/artifactory-backend.ts",
        "line": 16
      },
      "name": "DataTerraformRemoteStateArtifactory"
    },
    "cdktf.DataTerraformRemoteStateArtifactoryConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateArtifactoryConfig",
      "interfaces": [
        "cdktf.DataTerraformRemoteStateConfig",
        "cdktf.ArtifactoryBackendProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/artifactory-backend.ts",
        "line": 30
      },
      "name": "DataTerraformRemoteStateArtifactoryConfig"
    },
    "cdktf.DataTerraformRemoteStateAzurerm": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformRemoteState",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateAzurerm",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/azurerm-backend.ts",
          "line": 17
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.DataTerraformRemoteStateAzurermConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/azurerm-backend.ts",
        "line": 16
      },
      "name": "DataTerraformRemoteStateAzurerm"
    },
    "cdktf.DataTerraformRemoteStateAzurermConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateAzurermConfig",
      "interfaces": [
        "cdktf.DataTerraformRemoteStateConfig",
        "cdktf.AzurermBackendProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/azurerm-backend.ts",
        "line": 39
      },
      "name": "DataTerraformRemoteStateAzurermConfig"
    },
    "cdktf.DataTerraformRemoteStateConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-remote-state.ts",
        "line": 6
      },
      "name": "DataTerraformRemoteStateConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-remote-state.ts",
            "line": 8
          },
          "name": "defaults",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-remote-state.ts",
            "line": 7
          },
          "name": "workspace",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "cdktf.DataTerraformRemoteStateConsul": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformRemoteState",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateConsul",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/consul-backend.ts",
          "line": 17
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.DataTerraformRemoteStateConsulConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/consul-backend.ts",
        "line": 16
      },
      "name": "DataTerraformRemoteStateConsul"
    },
    "cdktf.DataTerraformRemoteStateConsulConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateConsulConfig",
      "interfaces": [
        "cdktf.DataTerraformRemoteStateConfig",
        "cdktf.ConsulBackendProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/consul-backend.ts",
        "line": 36
      },
      "name": "DataTerraformRemoteStateConsulConfig"
    },
    "cdktf.DataTerraformRemoteStateCos": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformRemoteState",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateCos",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/cos-backend.ts",
          "line": 17
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.DataTerraformRemoteStateCosConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/cos-backend.ts",
        "line": 16
      },
      "name": "DataTerraformRemoteStateCos"
    },
    "cdktf.DataTerraformRemoteStateCosConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateCosConfig",
      "interfaces": [
        "cdktf.DataTerraformRemoteStateConfig",
        "cdktf.CosBackendProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/cos-backend.ts",
        "line": 33
      },
      "name": "DataTerraformRemoteStateCosConfig"
    },
    "cdktf.DataTerraformRemoteStateEtcd": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformRemoteState",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateEtcd",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/etcd-backend.ts",
          "line": 17
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.DataTerraformRemoteStateEtcdConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/etcd-backend.ts",
        "line": 16
      },
      "name": "DataTerraformRemoteStateEtcd"
    },
    "cdktf.DataTerraformRemoteStateEtcdConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateEtcdConfig",
      "interfaces": [
        "cdktf.DataTerraformRemoteStateConfig",
        "cdktf.EtcdBackendProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/etcd-backend.ts",
        "line": 29
      },
      "name": "DataTerraformRemoteStateEtcdConfig"
    },
    "cdktf.DataTerraformRemoteStateEtcdV3": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformRemoteState",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateEtcdV3",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/etcdv3-backend.ts",
          "line": 17
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.DataTerraformRemoteStateEtcdV3Config"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/etcdv3-backend.ts",
        "line": 16
      },
      "name": "DataTerraformRemoteStateEtcdV3"
    },
    "cdktf.DataTerraformRemoteStateEtcdV3Config": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateEtcdV3Config",
      "interfaces": [
        "cdktf.DataTerraformRemoteStateConfig",
        "cdktf.EtcdV3BackendProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/etcdv3-backend.ts",
        "line": 33
      },
      "name": "DataTerraformRemoteStateEtcdV3Config"
    },
    "cdktf.DataTerraformRemoteStateGcs": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformRemoteState",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateGcs",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/gcs-backend.ts",
          "line": 17
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.DataTerraformRemoteStateGcsConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/gcs-backend.ts",
        "line": 16
      },
      "name": "DataTerraformRemoteStateGcs"
    },
    "cdktf.DataTerraformRemoteStateGcsConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateGcsConfig",
      "interfaces": [
        "cdktf.DataTerraformRemoteStateConfig",
        "cdktf.GcsBackendProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/gcs-backend.ts",
        "line": 30
      },
      "name": "DataTerraformRemoteStateGcsConfig"
    },
    "cdktf.DataTerraformRemoteStateHttp": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformRemoteState",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateHttp",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/http-backend.ts",
          "line": 17
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.DataTerraformRemoteStateHttpConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/http-backend.ts",
        "line": 16
      },
      "name": "DataTerraformRemoteStateHttp"
    },
    "cdktf.DataTerraformRemoteStateHttpConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateHttpConfig",
      "interfaces": [
        "cdktf.DataTerraformRemoteStateConfig",
        "cdktf.HttpBackendProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/http-backend.ts",
        "line": 37
      },
      "name": "DataTerraformRemoteStateHttpConfig"
    },
    "cdktf.DataTerraformRemoteStateLocal": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformRemoteState",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateLocal",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/local-backend.ts",
          "line": 17
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.DataTerraformRemoteStateLocalConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/local-backend.ts",
        "line": 16
      },
      "name": "DataTerraformRemoteStateLocal"
    },
    "cdktf.DataTerraformRemoteStateLocalConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateLocalConfig",
      "interfaces": [
        "cdktf.DataTerraformRemoteStateConfig",
        "cdktf.LocalBackendProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/local-backend.ts",
        "line": 27
      },
      "name": "DataTerraformRemoteStateLocalConfig"
    },
    "cdktf.DataTerraformRemoteStateManta": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformRemoteState",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateManta",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/manta-backend.ts",
          "line": 17
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.DataTerraformRemoteStateMantaConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/manta-backend.ts",
        "line": 16
      },
      "name": "DataTerraformRemoteStateManta"
    },
    "cdktf.DataTerraformRemoteStateMantaConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateMantaConfig",
      "interfaces": [
        "cdktf.DataTerraformRemoteStateConfig",
        "cdktf.MantaBackendProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/manta-backend.ts",
        "line": 33
      },
      "name": "DataTerraformRemoteStateMantaConfig"
    },
    "cdktf.DataTerraformRemoteStateOss": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformRemoteState",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateOss",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/oss-backend.ts",
          "line": 17
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.DataTerraformRemoteStateOssConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/oss-backend.ts",
        "line": 16
      },
      "name": "DataTerraformRemoteStateOss"
    },
    "cdktf.DataTerraformRemoteStateOssConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateOssConfig",
      "interfaces": [
        "cdktf.DataTerraformRemoteStateConfig",
        "cdktf.OssBackendProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/oss-backend.ts",
        "line": 48
      },
      "name": "DataTerraformRemoteStateOssConfig"
    },
    "cdktf.DataTerraformRemoteStatePg": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformRemoteState",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStatePg",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/pg-backend.ts",
          "line": 17
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.DataTerraformRemoteStatePgConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/pg-backend.ts",
        "line": 16
      },
      "name": "DataTerraformRemoteStatePg"
    },
    "cdktf.DataTerraformRemoteStatePgConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStatePgConfig",
      "interfaces": [
        "cdktf.DataTerraformRemoteStateConfig",
        "cdktf.PgBackendProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/pg-backend.ts",
        "line": 28
      },
      "name": "DataTerraformRemoteStatePgConfig"
    },
    "cdktf.DataTerraformRemoteStateRemoteConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateRemoteConfig",
      "interfaces": [
        "cdktf.DataTerraformRemoteStateConfig",
        "cdktf.RemoteBackendProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/remote-backend.ts",
        "line": 41
      },
      "name": "DataTerraformRemoteStateRemoteConfig"
    },
    "cdktf.DataTerraformRemoteStateS3": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformRemoteState",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateS3",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/s3-backend.ts",
          "line": 17
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.DataTerraformRemoteStateS3Config"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/s3-backend.ts",
        "line": 16
      },
      "name": "DataTerraformRemoteStateS3"
    },
    "cdktf.DataTerraformRemoteStateS3Config": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateS3Config",
      "interfaces": [
        "cdktf.DataTerraformRemoteStateConfig",
        "cdktf.S3BackendProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/s3-backend.ts",
        "line": 51
      },
      "name": "DataTerraformRemoteStateS3Config"
    },
    "cdktf.DataTerraformRemoteStateSwift": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformRemoteState",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateSwift",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/swift-backend.ts",
          "line": 17
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/swift-backend.ts",
        "line": 16
      },
      "name": "DataTerraformRemoteStateSwift"
    },
    "cdktf.DataTerraformRemoteStateSwiftConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig",
      "interfaces": [
        "cdktf.DataTerraformRemoteStateConfig",
        "cdktf.SwiftBackendProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/swift-backend.ts",
        "line": 52
      },
      "name": "DataTerraformRemoteStateSwiftConfig"
    },
    "cdktf.DefaultTokenResolver": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental",
        "summary": "Default resolver implementation."
      },
      "fqn": "cdktf.DefaultTokenResolver",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/tokens/resolvable.ts",
          "line": 125
        },
        "parameters": [
          {
            "name": "concat",
            "type": {
              "fqn": "cdktf.IFragmentConcatenator"
            }
          }
        ]
      },
      "interfaces": [
        "cdktf.ITokenResolver"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/tokens/resolvable.ts",
        "line": 124
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Resolve a tokenized list."
          },
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 160
          },
          "name": "resolveList",
          "overrides": "cdktf.ITokenResolver",
          "parameters": [
            {
              "name": "xs",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              }
            },
            {
              "name": "context",
              "type": {
                "fqn": "cdktf.IResolveContext"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Resolve string fragments to Tokens."
          },
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 156
          },
          "name": "resolveString",
          "overrides": "cdktf.ITokenResolver",
          "parameters": [
            {
              "name": "fragments",
              "type": {
                "fqn": "cdktf.TokenizedStringFragments"
              }
            },
            {
              "name": "context",
              "type": {
                "fqn": "cdktf.IResolveContext"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "remarks": "Resolve the Token, recurse into whatever it returns,\nthen finally post-process it.",
            "stability": "experimental",
            "summary": "Default Token resolution."
          },
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 134
          },
          "name": "resolveToken",
          "overrides": "cdktf.ITokenResolver",
          "parameters": [
            {
              "name": "t",
              "type": {
                "fqn": "cdktf.IResolvable"
              }
            },
            {
              "name": "context",
              "type": {
                "fqn": "cdktf.IResolveContext"
              }
            },
            {
              "name": "postProcessor",
              "type": {
                "fqn": "cdktf.IPostProcessor"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "DefaultTokenResolver"
    },
    "cdktf.EncodingOptions": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties to string encodings."
      },
      "fqn": "cdktf.EncodingOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/tokens/token.ts",
        "line": 177
      },
      "name": "EncodingOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- no display hint",
            "stability": "experimental",
            "summary": "A hint for the Token's purpose when stringifying it."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 182
          },
          "name": "displayHint",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "cdktf.EtcdBackend": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformBackend",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.EtcdBackend",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/etcd-backend.ts",
          "line": 7
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "cdktf.EtcdBackendProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/etcd-backend.ts",
        "line": 6
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/backends/etcd-backend.ts",
            "line": 11
          },
          "name": "synthesizeAttributes",
          "overrides": "cdktf.TerraformBackend",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "EtcdBackend"
    },
    "cdktf.EtcdBackendProps": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.EtcdBackendProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/etcd-backend.ts",
        "line": 22
      },
      "name": "EtcdBackendProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/etcd-backend.ts",
            "line": 24
          },
          "name": "endpoints",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/etcd-backend.ts",
            "line": 23
          },
          "name": "path",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/etcd-backend.ts",
            "line": 26
          },
          "name": "password",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/etcd-backend.ts",
            "line": 25
          },
          "name": "username",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "cdktf.EtcdV3Backend": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformBackend",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.EtcdV3Backend",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/etcdv3-backend.ts",
          "line": 7
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "cdktf.EtcdV3BackendProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/etcdv3-backend.ts",
        "line": 6
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/backends/etcdv3-backend.ts",
            "line": 11
          },
          "name": "synthesizeAttributes",
          "overrides": "cdktf.TerraformBackend",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "EtcdV3Backend"
    },
    "cdktf.EtcdV3BackendProps": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.EtcdV3BackendProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/etcdv3-backend.ts",
        "line": 22
      },
      "name": "EtcdV3BackendProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/etcdv3-backend.ts",
            "line": 23
          },
          "name": "endpoints",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/etcdv3-backend.ts",
            "line": 28
          },
          "name": "cacertPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/etcdv3-backend.ts",
            "line": 29
          },
          "name": "certPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/etcdv3-backend.ts",
            "line": 30
          },
          "name": "keyPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/etcdv3-backend.ts",
            "line": 27
          },
          "name": "lock",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/etcdv3-backend.ts",
            "line": 25
          },
          "name": "password",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/etcdv3-backend.ts",
            "line": 26
          },
          "name": "prefix",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/etcdv3-backend.ts",
            "line": 24
          },
          "name": "username",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "cdktf.GcsBackend": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformBackend",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.GcsBackend",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/gcs-backend.ts",
          "line": 7
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "cdktf.GcsBackendProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/gcs-backend.ts",
        "line": 6
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/backends/gcs-backend.ts",
            "line": 11
          },
          "name": "synthesizeAttributes",
          "overrides": "cdktf.TerraformBackend",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "GcsBackend"
    },
    "cdktf.GcsBackendProps": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.GcsBackendProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/gcs-backend.ts",
        "line": 22
      },
      "name": "GcsBackendProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/gcs-backend.ts",
            "line": 23
          },
          "name": "bucket",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/gcs-backend.ts",
            "line": 25
          },
          "name": "accessToken",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/gcs-backend.ts",
            "line": 24
          },
          "name": "credentials",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/gcs-backend.ts",
            "line": 27
          },
          "name": "encryptionKey",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/gcs-backend.ts",
            "line": 26
          },
          "name": "prefix",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "cdktf.HttpBackend": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformBackend",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.HttpBackend",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/http-backend.ts",
          "line": 7
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "cdktf.HttpBackendProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/http-backend.ts",
        "line": 6
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/backends/http-backend.ts",
            "line": 11
          },
          "name": "synthesizeAttributes",
          "overrides": "cdktf.TerraformBackend",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "HttpBackend"
    },
    "cdktf.HttpBackendProps": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.HttpBackendProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/http-backend.ts",
        "line": 22
      },
      "name": "HttpBackendProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/http-backend.ts",
            "line": 23
          },
          "name": "address",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/http-backend.ts",
            "line": 25
          },
          "name": "lockAddress",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/http-backend.ts",
            "line": 26
          },
          "name": "lockMethod",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/http-backend.ts",
            "line": 30
          },
          "name": "password",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/http-backend.ts",
            "line": 32
          },
          "name": "retryMax",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/http-backend.ts",
            "line": 34
          },
          "name": "retryWaitMax",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/http-backend.ts",
            "line": 33
          },
          "name": "retryWaitMin",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/http-backend.ts",
            "line": 31
          },
          "name": "skipCertVerification",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/http-backend.ts",
            "line": 27
          },
          "name": "unlockAddress",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/http-backend.ts",
            "line": 28
          },
          "name": "unlockMethod",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/http-backend.ts",
            "line": 24
          },
          "name": "updateMethod",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/http-backend.ts",
            "line": 29
          },
          "name": "username",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "cdktf.IAnyProducer": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental",
        "summary": "Interface for lazy untyped value producers."
      },
      "fqn": "cdktf.IAnyProducer",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/tokens/lazy.ts",
        "line": 40
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Produce the value."
          },
          "locationInModule": {
            "filename": "lib/tokens/lazy.ts",
            "line": 44
          },
          "name": "produce",
          "parameters": [
            {
              "name": "context",
              "type": {
                "fqn": "cdktf.IResolveContext"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "IAnyProducer"
    },
    "cdktf.IFragmentConcatenator": {
      "assembly": "cdktf",
      "docs": {
        "remarks": "Interface so it could potentially be exposed over jsii.",
        "stability": "experimental",
        "summary": "Function used to concatenate symbols in the target document language."
      },
      "fqn": "cdktf.IFragmentConcatenator",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/tokens/resolvable.ts",
        "line": 99
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Join the fragment on the left and on the right."
          },
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 103
          },
          "name": "join",
          "parameters": [
            {
              "name": "left",
              "type": {
                "primitive": "any"
              }
            },
            {
              "name": "right",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "IFragmentConcatenator"
    },
    "cdktf.IListProducer": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental",
        "summary": "Interface for lazy list producers."
      },
      "fqn": "cdktf.IListProducer",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/tokens/lazy.ts",
        "line": 20
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Produce the list value."
          },
          "locationInModule": {
            "filename": "lib/tokens/lazy.ts",
            "line": 24
          },
          "name": "produce",
          "parameters": [
            {
              "name": "context",
              "type": {
                "fqn": "cdktf.IResolveContext"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          }
        }
      ],
      "name": "IListProducer"
    },
    "cdktf.INumberProducer": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental",
        "summary": "Interface for lazy number producers."
      },
      "fqn": "cdktf.INumberProducer",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/tokens/lazy.ts",
        "line": 30
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Produce the number value."
          },
          "locationInModule": {
            "filename": "lib/tokens/lazy.ts",
            "line": 34
          },
          "name": "produce",
          "parameters": [
            {
              "name": "context",
              "type": {
                "fqn": "cdktf.IResolveContext"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "primitive": "number"
            }
          }
        }
      ],
      "name": "INumberProducer"
    },
    "cdktf.IPostProcessor": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental",
        "summary": "A Token that can post-process the complete resolved value, after resolve() has recursed over it."
      },
      "fqn": "cdktf.IPostProcessor",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/tokens/resolvable.ts",
        "line": 63
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Process the completely resolved value, after full recursion/resolution has happened."
          },
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 67
          },
          "name": "postProcess",
          "parameters": [
            {
              "name": "input",
              "type": {
                "primitive": "any"
              }
            },
            {
              "name": "context",
              "type": {
                "fqn": "cdktf.IResolveContext"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "IPostProcessor"
    },
    "cdktf.IRemoteWorkspace": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.IRemoteWorkspace",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/remote-backend.ts",
        "line": 29
      },
      "name": "IRemoteWorkspace"
    },
    "cdktf.IResolvable": {
      "assembly": "cdktf",
      "docs": {
        "remarks": "Tokens are special objects that participate in synthesis.",
        "stability": "experimental",
        "summary": "Interface for values that can be resolvable later."
      },
      "fqn": "cdktf.IResolvable",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/tokens/resolvable.ts",
        "line": 38
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Produce the Token's value at resolution time."
          },
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 50
          },
          "name": "resolve",
          "parameters": [
            {
              "name": "context",
              "type": {
                "fqn": "cdktf.IResolveContext"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Returns a reversible string representation.",
            "stability": "experimental",
            "summary": "Return a string representation of this resolvable object."
          },
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 57
          },
          "name": "toString",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "IResolvable",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "If this returns an empty array the stack will not be attached.",
            "stability": "experimental",
            "summary": "The creation stack of this resolvable which will be appended to errors thrown during resolution."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 45
          },
          "name": "creationStack",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "cdktf.IResolveContext": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental",
        "summary": "Current resolution context for tokens."
      },
      "fqn": "cdktf.IResolveContext",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/tokens/resolvable.ts",
        "line": 11
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Use this postprocessor after the entire token structure has been resolved."
          },
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 30
          },
          "name": "registerPostProcessor",
          "parameters": [
            {
              "name": "postProcessor",
              "type": {
                "fqn": "cdktf.IPostProcessor"
              }
            }
          ]
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Resolve an inner object."
          },
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 25
          },
          "name": "resolve",
          "parameters": [
            {
              "name": "x",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "IResolveContext",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "True when we are still preparing, false if we're rendering the final output."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 20
          },
          "name": "preparing",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The scope from which resolution has been initiated."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 15
          },
          "name": "scope",
          "type": {
            "fqn": "constructs.IConstruct"
          }
        }
      ]
    },
    "cdktf.IResource": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.IResource",
      "interfaces": [
        "constructs.IConstruct"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/resource.ts",
        "line": 4
      },
      "name": "IResource",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The stack in which this resource is defined."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/resource.ts",
            "line": 8
          },
          "name": "stack",
          "type": {
            "fqn": "cdktf.TerraformStack"
          }
        }
      ]
    },
    "cdktf.IStringProducer": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental",
        "summary": "Interface for lazy string producers."
      },
      "fqn": "cdktf.IStringProducer",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/tokens/lazy.ts",
        "line": 10
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Produce the string value."
          },
          "locationInModule": {
            "filename": "lib/tokens/lazy.ts",
            "line": 14
          },
          "name": "produce",
          "parameters": [
            {
              "name": "context",
              "type": {
                "fqn": "cdktf.IResolveContext"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "IStringProducer"
    },
    "cdktf.ITerraformResource": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.ITerraformResource",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-resource.ts",
        "line": 7
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 17
          },
          "name": "interpolationForAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "ITerraformResource",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 9
          },
          "name": "fqn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 10
          },
          "name": "friendlyUniqueId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 8
          },
          "name": "terraformResourceType",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 13
          },
          "name": "count",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 12
          },
          "name": "dependsOn",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 15
          },
          "name": "lifecycle",
          "optional": true,
          "type": {
            "fqn": "cdktf.TerraformResourceLifecycle"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 14
          },
          "name": "provider",
          "optional": true,
          "type": {
            "fqn": "cdktf.TerraformProvider"
          }
        }
      ]
    },
    "cdktf.ITokenMapper": {
      "assembly": "cdktf",
      "docs": {
        "remarks": "Interface so it can be exported via jsii.",
        "stability": "experimental",
        "summary": "Interface to apply operation to tokens in a string."
      },
      "fqn": "cdktf.ITokenMapper",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/tokens/string-fragments.ts",
        "line": 137
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Replace a single token."
          },
          "locationInModule": {
            "filename": "lib/tokens/string-fragments.ts",
            "line": 141
          },
          "name": "mapToken",
          "parameters": [
            {
              "name": "t",
              "type": {
                "fqn": "cdktf.IResolvable"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "ITokenMapper"
    },
    "cdktf.ITokenResolver": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental",
        "summary": "How to resolve tokens."
      },
      "fqn": "cdktf.ITokenResolver",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/tokens/resolvable.ts",
        "line": 73
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Resolve a tokenized list."
          },
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 89
          },
          "name": "resolveList",
          "parameters": [
            {
              "name": "l",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              }
            },
            {
              "name": "context",
              "type": {
                "fqn": "cdktf.IResolveContext"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "(May use concatenation)",
            "stability": "experimental",
            "summary": "Resolve a string with at least one stringified token in it."
          },
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 84
          },
          "name": "resolveString",
          "parameters": [
            {
              "name": "s",
              "type": {
                "fqn": "cdktf.TokenizedStringFragments"
              }
            },
            {
              "name": "context",
              "type": {
                "fqn": "cdktf.IResolveContext"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Resolve a single token."
          },
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 77
          },
          "name": "resolveToken",
          "parameters": [
            {
              "name": "t",
              "type": {
                "fqn": "cdktf.IResolvable"
              }
            },
            {
              "name": "context",
              "type": {
                "fqn": "cdktf.IResolveContext"
              }
            },
            {
              "name": "postProcessor",
              "type": {
                "fqn": "cdktf.IPostProcessor"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "ITokenResolver"
    },
    "cdktf.Lazy": {
      "assembly": "cdktf",
      "docs": {
        "remarks": "Can be used to return a string, list or numeric value whose actual value\nwill only be calculated later, during synthesis.",
        "stability": "experimental",
        "summary": "Lazily produce a value."
      },
      "fqn": "cdktf.Lazy",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/tokens/lazy.ts",
        "line": 103
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Produces a lazy token from an untyped value."
          },
          "locationInModule": {
            "filename": "lib/tokens/lazy.ts",
            "line": 135
          },
          "name": "anyValue",
          "parameters": [
            {
              "docs": {
                "summary": "The lazy producer."
              },
              "name": "producer",
              "type": {
                "fqn": "cdktf.IAnyProducer"
              }
            },
            {
              "docs": {
                "summary": "Options."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "cdktf.LazyAnyValueOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns a list-ified token for a lazy value."
          },
          "locationInModule": {
            "filename": "lib/tokens/lazy.ts",
            "line": 126
          },
          "name": "listValue",
          "parameters": [
            {
              "docs": {
                "summary": "The producer."
              },
              "name": "producer",
              "type": {
                "fqn": "cdktf.IListProducer"
              }
            },
            {
              "docs": {
                "summary": "Options."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "cdktf.LazyListValueOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns a numberified token for a lazy value."
          },
          "locationInModule": {
            "filename": "lib/tokens/lazy.ts",
            "line": 117
          },
          "name": "numberValue",
          "parameters": [
            {
              "docs": {
                "summary": "The producer."
              },
              "name": "producer",
              "type": {
                "fqn": "cdktf.INumberProducer"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns a stringified token for a lazy value."
          },
          "locationInModule": {
            "filename": "lib/tokens/lazy.ts",
            "line": 109
          },
          "name": "stringValue",
          "parameters": [
            {
              "docs": {
                "summary": "The producer."
              },
              "name": "producer",
              "type": {
                "fqn": "cdktf.IStringProducer"
              }
            },
            {
              "docs": {
                "summary": "Options."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "cdktf.LazyStringValueOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        }
      ],
      "name": "Lazy"
    },
    "cdktf.LazyAnyValueOptions": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for creating lazy untyped tokens."
      },
      "fqn": "cdktf.LazyAnyValueOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/tokens/lazy.ts",
        "line": 81
      },
      "name": "LazyAnyValueOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- No hint",
            "stability": "experimental",
            "summary": "Use the given name as a display hint."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/lazy.ts",
            "line": 87
          },
          "name": "displayHint",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "If the produced value is an array and it is empty, return 'undefined' instead."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/lazy.ts",
            "line": 94
          },
          "name": "omitEmptyArray",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "cdktf.LazyListValueOptions": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for creating a lazy list token."
      },
      "fqn": "cdktf.LazyListValueOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/tokens/lazy.ts",
        "line": 62
      },
      "name": "LazyListValueOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- No hint",
            "stability": "experimental",
            "summary": "Use the given name as a display hint."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/lazy.ts",
            "line": 68
          },
          "name": "displayHint",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "If the produced list is empty, return 'undefined' instead."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/lazy.ts",
            "line": 75
          },
          "name": "omitEmpty",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "cdktf.LazyStringValueOptions": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for creating a lazy string token."
      },
      "fqn": "cdktf.LazyStringValueOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/tokens/lazy.ts",
        "line": 50
      },
      "name": "LazyStringValueOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- No hint",
            "stability": "experimental",
            "summary": "Use the given name as a display hint."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/lazy.ts",
            "line": 56
          },
          "name": "displayHint",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "cdktf.LocalBackend": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformBackend",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.LocalBackend",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/local-backend.ts",
          "line": 7
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "cdktf.LocalBackendProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/local-backend.ts",
        "line": 6
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/backends/local-backend.ts",
            "line": 11
          },
          "name": "synthesizeAttributes",
          "overrides": "cdktf.TerraformBackend",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "LocalBackend"
    },
    "cdktf.LocalBackendProps": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.LocalBackendProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/local-backend.ts",
        "line": 22
      },
      "name": "LocalBackendProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/local-backend.ts",
            "line": 23
          },
          "name": "path",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/local-backend.ts",
            "line": 24
          },
          "name": "workspaceDir",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "cdktf.MantaBackend": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformBackend",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.MantaBackend",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/manta-backend.ts",
          "line": 7
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "cdktf.MantaBackendProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/manta-backend.ts",
        "line": 6
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/backends/manta-backend.ts",
            "line": 11
          },
          "name": "synthesizeAttributes",
          "overrides": "cdktf.TerraformBackend",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "MantaBackend"
    },
    "cdktf.MantaBackendProps": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.MantaBackendProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/manta-backend.ts",
        "line": 22
      },
      "name": "MantaBackendProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/manta-backend.ts",
            "line": 23
          },
          "name": "account",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/manta-backend.ts",
            "line": 27
          },
          "name": "keyId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/manta-backend.ts",
            "line": 29
          },
          "name": "path",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/manta-backend.ts",
            "line": 28
          },
          "name": "insecureSkipTlsVerify",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/manta-backend.ts",
            "line": 26
          },
          "name": "keyMaterial",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/manta-backend.ts",
            "line": 30
          },
          "name": "objectName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/manta-backend.ts",
            "line": 25
          },
          "name": "url",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/manta-backend.ts",
            "line": 24
          },
          "name": "user",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "cdktf.NamedRemoteWorkspace": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.NamedRemoteWorkspace",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/remote-backend.ts",
          "line": 34
        },
        "parameters": [
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "interfaces": [
        "cdktf.IRemoteWorkspace"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/remote-backend.ts",
        "line": 33
      },
      "name": "NamedRemoteWorkspace",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/backends/remote-backend.ts",
            "line": 34
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "cdktf.NumberMap": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.NumberMap",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/complex-computed-list.ts",
          "line": 35
        },
        "parameters": [
          {
            "name": "terraformResource",
            "type": {
              "fqn": "cdktf.ITerraformResource"
            }
          },
          {
            "name": "terraformAttribute",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/complex-computed-list.ts",
        "line": 34
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 37
          },
          "name": "lookup",
          "parameters": [
            {
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        }
      ],
      "name": "NumberMap",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 35
          },
          "name": "terraformAttribute",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 35
          },
          "name": "terraformResource",
          "protected": true,
          "type": {
            "fqn": "cdktf.ITerraformResource"
          }
        }
      ]
    },
    "cdktf.OssAssumeRole": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.OssAssumeRole",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/oss-backend.ts",
        "line": 41
      },
      "name": "OssAssumeRole",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 42
          },
          "name": "roleArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 43
          },
          "name": "policy",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 45
          },
          "name": "sessionExpiration",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 44
          },
          "name": "sessionName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "cdktf.OssBackend": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformBackend",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.OssBackend",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/oss-backend.ts",
          "line": 7
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "cdktf.OssBackendProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/oss-backend.ts",
        "line": 6
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 11
          },
          "name": "synthesizeAttributes",
          "overrides": "cdktf.TerraformBackend",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "OssBackend"
    },
    "cdktf.OssBackendProps": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.OssBackendProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/oss-backend.ts",
        "line": 22
      },
      "name": "OssBackendProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 29
          },
          "name": "bucket",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 23
          },
          "name": "accessKey",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 35
          },
          "name": "acl",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 38
          },
          "name": "assumeRole",
          "optional": true,
          "type": {
            "fqn": "cdktf.OssAssumeRole"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 26
          },
          "name": "ecsRoleName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 34
          },
          "name": "encrypt",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 28
          },
          "name": "endpoint",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 31
          },
          "name": "key",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 30
          },
          "name": "prefix",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 37
          },
          "name": "profile",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 27
          },
          "name": "region",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 24
          },
          "name": "secretKey",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 25
          },
          "name": "securityToken",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 36
          },
          "name": "sharedCredentialsFile",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 32
          },
          "name": "tablestoreEndpoint",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 33
          },
          "name": "tablestoreTable",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "cdktf.PgBackend": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformBackend",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.PgBackend",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/pg-backend.ts",
          "line": 7
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "cdktf.PgBackendProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/pg-backend.ts",
        "line": 6
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/backends/pg-backend.ts",
            "line": 11
          },
          "name": "synthesizeAttributes",
          "overrides": "cdktf.TerraformBackend",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "PgBackend"
    },
    "cdktf.PgBackendProps": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.PgBackendProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/pg-backend.ts",
        "line": 22
      },
      "name": "PgBackendProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/pg-backend.ts",
            "line": 23
          },
          "name": "connStr",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/pg-backend.ts",
            "line": 24
          },
          "name": "schemaName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/pg-backend.ts",
            "line": 25
          },
          "name": "skipSchemaCreation",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "cdktf.PrefixedRemoteWorkspaces": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.PrefixedRemoteWorkspaces",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/remote-backend.ts",
          "line": 38
        },
        "parameters": [
          {
            "name": "prefix",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "interfaces": [
        "cdktf.IRemoteWorkspace"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/remote-backend.ts",
        "line": 37
      },
      "name": "PrefixedRemoteWorkspaces",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/backends/remote-backend.ts",
            "line": 38
          },
          "name": "prefix",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "cdktf.RemoteBackend": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformBackend",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.RemoteBackend",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/remote-backend.ts",
          "line": 7
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "cdktf.RemoteBackendProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/remote-backend.ts",
        "line": 6
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/backends/remote-backend.ts",
            "line": 11
          },
          "name": "synthesizeAttributes",
          "overrides": "cdktf.TerraformBackend",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "RemoteBackend"
    },
    "cdktf.RemoteBackendProps": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.RemoteBackendProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/remote-backend.ts",
        "line": 22
      },
      "name": "RemoteBackendProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/remote-backend.ts",
            "line": 24
          },
          "name": "organization",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/remote-backend.ts",
            "line": 26
          },
          "name": "workspaces",
          "type": {
            "fqn": "cdktf.IRemoteWorkspace"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/remote-backend.ts",
            "line": 23
          },
          "name": "hostname",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/remote-backend.ts",
            "line": 25
          },
          "name": "token",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "cdktf.ResolveOptions": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "remarks": "NOT the same as the ResolveContext; ResolveContext is exposed to Token\nimplementors and resolution hooks, whereas this struct is just to bundle\na number of things that would otherwise be arguments to resolve() in a\nreadable way.",
        "stability": "experimental",
        "summary": "Options to the resolve() operation."
      },
      "fqn": "cdktf.ResolveOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/tokens/token.ts",
        "line": 156
      },
      "name": "ResolveOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The resolver to apply to any resolvable tokens found."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 165
          },
          "name": "resolver",
          "type": {
            "fqn": "cdktf.ITokenResolver"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The scope from which resolution is performed."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 160
          },
          "name": "scope",
          "type": {
            "fqn": "constructs.IConstruct"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Whether the resolution is being executed during the prepare phase or not."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 171
          },
          "name": "preparing",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "cdktf.Resource": {
      "abstract": true,
      "assembly": "cdktf",
      "base": "constructs.Construct",
      "docs": {
        "stability": "experimental",
        "summary": "A construct which represents a resource."
      },
      "fqn": "cdktf.Resource",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/resource.ts",
          "line": 17
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "interfaces": [
        "cdktf.IResource"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/resource.ts",
        "line": 14
      },
      "name": "Resource",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The stack in which this resource is defined."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/resource.ts",
            "line": 15
          },
          "name": "stack",
          "overrides": "cdktf.IResource",
          "type": {
            "fqn": "cdktf.TerraformStack"
          }
        }
      ]
    },
    "cdktf.S3Backend": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformBackend",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.S3Backend",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/s3-backend.ts",
          "line": 7
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "cdktf.S3BackendProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/s3-backend.ts",
        "line": 6
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 11
          },
          "name": "synthesizeAttributes",
          "overrides": "cdktf.TerraformBackend",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "S3Backend"
    },
    "cdktf.S3BackendProps": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.S3BackendProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/s3-backend.ts",
        "line": 22
      },
      "name": "S3BackendProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 23
          },
          "name": "bucket",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 24
          },
          "name": "key",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 29
          },
          "name": "accessKey",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 28
          },
          "name": "acl",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 37
          },
          "name": "assumeRolePolicy",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 41
          },
          "name": "dynamodbEndpoint",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 32
          },
          "name": "dynamodbTable",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 27
          },
          "name": "encrypt",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 26
          },
          "name": "endpoint",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 38
          },
          "name": "externalId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 44
          },
          "name": "forcePathStyle",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 42
          },
          "name": "iamEndpoint",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 31
          },
          "name": "kmsKeyId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 48
          },
          "name": "maxRetries",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 33
          },
          "name": "profile",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 25
          },
          "name": "region",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 36
          },
          "name": "roleArn",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 30
          },
          "name": "secretKey",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 39
          },
          "name": "sessionName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 34
          },
          "name": "sharedCredentialsFile",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 45
          },
          "name": "skipCredentialsValidation",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 46
          },
          "name": "skipMetadataApiCheck",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 47
          },
          "name": "sseCustomerKey",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 43
          },
          "name": "stsEndpoint",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 35
          },
          "name": "token",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 40
          },
          "name": "workspaceKeyPrefix",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "cdktf.StringConcat": {
      "assembly": "cdktf",
      "docs": {
        "remarks": "Drops 'undefined's.",
        "stability": "experimental",
        "summary": "Converts all fragments to strings and concats those."
      },
      "fqn": "cdktf.StringConcat",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "interfaces": [
        "cdktf.IFragmentConcatenator"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/tokens/resolvable.ts",
        "line": 111
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Join the fragment on the left and on the right."
          },
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 112
          },
          "name": "join",
          "overrides": "cdktf.IFragmentConcatenator",
          "parameters": [
            {
              "name": "left",
              "type": {
                "primitive": "any"
              }
            },
            {
              "name": "right",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "StringConcat"
    },
    "cdktf.StringMap": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.StringMap",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/complex-computed-list.ts",
          "line": 27
        },
        "parameters": [
          {
            "name": "terraformResource",
            "type": {
              "fqn": "cdktf.ITerraformResource"
            }
          },
          {
            "name": "terraformAttribute",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/complex-computed-list.ts",
        "line": 26
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 29
          },
          "name": "lookup",
          "parameters": [
            {
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "StringMap",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 27
          },
          "name": "terraformAttribute",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 27
          },
          "name": "terraformResource",
          "protected": true,
          "type": {
            "fqn": "cdktf.ITerraformResource"
          }
        }
      ]
    },
    "cdktf.SwiftBackend": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformBackend",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.SwiftBackend",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/swift-backend.ts",
          "line": 7
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "cdktf.SwiftBackendProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/swift-backend.ts",
        "line": 6
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 11
          },
          "name": "synthesizeAttributes",
          "overrides": "cdktf.TerraformBackend",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "SwiftBackend"
    },
    "cdktf.SwiftBackendProps": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.SwiftBackendProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/swift-backend.ts",
        "line": 22
      },
      "name": "SwiftBackendProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 25
          },
          "name": "container",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 30
          },
          "name": "applicationCredentialId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 31
          },
          "name": "applicationCredentialName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 32
          },
          "name": "applicationCredentialSecret",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 48
          },
          "name": "archiveContainer",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 23
          },
          "name": "authUrl",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 45
          },
          "name": "cacertFile",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 46
          },
          "name": "cert",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 24
          },
          "name": "cloud",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 43
          },
          "name": "defaultDomain",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 37
          },
          "name": "domainId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 38
          },
          "name": "domainName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 49
          },
          "name": "expireAfter",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 44
          },
          "name": "insecure",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 47
          },
          "name": "key",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 29
          },
          "name": "password",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 42
          },
          "name": "projectDomainId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 41
          },
          "name": "projectDomainName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 34
          },
          "name": "regionName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 26
          },
          "name": "stateName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 35
          },
          "name": "tenantId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 36
          },
          "name": "tenantName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 33
          },
          "name": "token",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 40
          },
          "name": "userDomainId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 39
          },
          "name": "userDomainName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 28
          },
          "name": "userId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 27
          },
          "name": "userName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "cdktf.TerraformBackend": {
      "abstract": true,
      "assembly": "cdktf",
      "base": "cdktf.TerraformElement",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformBackend",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/terraform-backend.ts",
          "line": 6
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/terraform-backend.ts",
        "line": 5
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-backend.ts",
            "line": 11
          },
          "name": "synthesizeAttributes",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds this resource to the terraform JSON output."
          },
          "locationInModule": {
            "filename": "lib/terraform-backend.ts",
            "line": 18
          },
          "name": "toTerraform",
          "overrides": "cdktf.TerraformElement",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "TerraformBackend",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-backend.ts",
            "line": 6
          },
          "name": "name",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "cdktf.TerraformDataSource": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformElement",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformDataSource",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/terraform-data-source.ts",
          "line": 19
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.TerraformResourceConfig"
            }
          }
        ]
      },
      "interfaces": [
        "cdktf.ITerraformResource"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/terraform-data-source.ts",
        "line": 8
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-data-source.ts",
            "line": 44
          },
          "name": "getBooleanAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-data-source.ts",
            "line": 40
          },
          "name": "getListAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-data-source.ts",
            "line": 36
          },
          "name": "getNumberAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-data-source.ts",
            "line": 32
          },
          "name": "getStringAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-data-source.ts",
            "line": 87
          },
          "name": "interpolationForAttribute",
          "overrides": "cdktf.ITerraformResource",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-data-source.ts",
            "line": 62
          },
          "name": "synthesizeAttributes",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds this resource to the terraform JSON output."
          },
          "locationInModule": {
            "filename": "lib/terraform-data-source.ts",
            "line": 69
          },
          "name": "toTerraform",
          "overrides": "cdktf.TerraformElement",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "TerraformDataSource",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-data-source.ts",
            "line": 48
          },
          "name": "fqn",
          "overrides": "cdktf.ITerraformResource",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-data-source.ts",
            "line": 52
          },
          "name": "terraformMetaArguments",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-data-source.ts",
            "line": 9
          },
          "name": "terraformResourceType",
          "overrides": "cdktf.ITerraformResource",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-data-source.ts",
            "line": 10
          },
          "name": "terraformGeneratorMetadata",
          "optional": true,
          "type": {
            "fqn": "cdktf.TerraformGeneratorMetadata"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-data-source.ts",
            "line": 15
          },
          "name": "count",
          "optional": true,
          "overrides": "cdktf.ITerraformResource",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-data-source.ts",
            "line": 14
          },
          "name": "dependsOn",
          "optional": true,
          "overrides": "cdktf.ITerraformResource",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-data-source.ts",
            "line": 17
          },
          "name": "lifecycle",
          "optional": true,
          "overrides": "cdktf.ITerraformResource",
          "type": {
            "fqn": "cdktf.TerraformResourceLifecycle"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-data-source.ts",
            "line": 16
          },
          "name": "provider",
          "optional": true,
          "overrides": "cdktf.ITerraformResource",
          "type": {
            "fqn": "cdktf.TerraformProvider"
          }
        }
      ]
    },
    "cdktf.TerraformElement": {
      "assembly": "cdktf",
      "base": "constructs.Construct",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformElement",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/terraform-element.ts",
          "line": 19
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/terraform-element.ts",
        "line": 10
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-element.ts",
            "line": 51
          },
          "name": "addOverride",
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "any"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Overrides the auto-generated logical ID with a specific ID."
          },
          "locationInModule": {
            "filename": "lib/terraform-element.ts",
            "line": 47
          },
          "name": "overrideLogicalId",
          "parameters": [
            {
              "docs": {
                "summary": "The new logical ID to use for this stack element."
              },
              "name": "newLogicalId",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-element.ts",
            "line": 30
          },
          "name": "toTerraform",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "TerraformElement",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-element.ts",
            "line": 26
          },
          "name": "constructNode",
          "type": {
            "fqn": "constructs.Node"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-element.ts",
            "line": 74
          },
          "name": "constructNodeMetadata",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-element.ts",
            "line": 34
          },
          "name": "friendlyUniqueId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-element.ts",
            "line": 12
          },
          "name": "rawOverrides",
          "protected": true,
          "type": {
            "primitive": "any"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-element.ts",
            "line": 11
          },
          "name": "stack",
          "type": {
            "fqn": "cdktf.TerraformStack"
          }
        }
      ]
    },
    "cdktf.TerraformElementMetadata": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformElementMetadata",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-element.ts",
        "line": 4
      },
      "name": "TerraformElementMetadata",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-element.ts",
            "line": 5
          },
          "name": "path",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-element.ts",
            "line": 7
          },
          "name": "stackTrace",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-element.ts",
            "line": 6
          },
          "name": "uniqueId",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "cdktf.TerraformGeneratorMetadata": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformGeneratorMetadata",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-resource.ts",
        "line": 33
      },
      "name": "TerraformGeneratorMetadata",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 34
          },
          "name": "providerName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 35
          },
          "name": "providerVersionConstraint",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "cdktf.TerraformHclModule": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformModule",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformHclModule",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/terraform-hcl-module.ts",
          "line": 11
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "options",
            "type": {
              "fqn": "cdktf.TerraformHclModuleOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/terraform-hcl-module.ts",
        "line": 8
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-hcl-module.ts",
            "line": 28
          },
          "name": "get",
          "parameters": [
            {
              "name": "output",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-hcl-module.ts",
            "line": 40
          },
          "name": "getBoolean",
          "parameters": [
            {
              "name": "output",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-hcl-module.ts",
            "line": 44
          },
          "name": "getList",
          "parameters": [
            {
              "name": "output",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-hcl-module.ts",
            "line": 36
          },
          "name": "getNumber",
          "parameters": [
            {
              "name": "output",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-hcl-module.ts",
            "line": 32
          },
          "name": "getString",
          "parameters": [
            {
              "name": "output",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-hcl-module.ts",
            "line": 21
          },
          "name": "set",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "any"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-hcl-module.ts",
            "line": 48
          },
          "name": "synthesizeAttributes",
          "overrides": "cdktf.TerraformModule",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "TerraformHclModule",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-hcl-module.ts",
            "line": 17
          },
          "name": "variables",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        }
      ]
    },
    "cdktf.TerraformHclModuleOptions": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformHclModuleOptions",
      "interfaces": [
        "cdktf.TerraformModuleOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-hcl-module.ts",
        "line": 4
      },
      "name": "TerraformHclModuleOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-hcl-module.ts",
            "line": 5
          },
          "name": "variables",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        }
      ]
    },
    "cdktf.TerraformLocal": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformElement",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformLocal",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/terraform-local.ts",
          "line": 8
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "expression",
            "type": {
              "primitive": "any"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/terraform-local.ts",
        "line": 5
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-local.ts",
            "line": 42
          },
          "name": "toTerraform",
          "overrides": "cdktf.TerraformElement",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "TerraformLocal",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-local.ts",
            "line": 34
          },
          "name": "asBoolean",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-local.ts",
            "line": 30
          },
          "name": "asList",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-local.ts",
            "line": 26
          },
          "name": "asNumber",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-local.ts",
            "line": 22
          },
          "name": "asString",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-local.ts",
            "line": 14
          },
          "name": "expression",
          "type": {
            "primitive": "any"
          }
        }
      ]
    },
    "cdktf.TerraformMetaArguments": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformMetaArguments",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-resource.ts",
        "line": 26
      },
      "name": "TerraformMetaArguments",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 28
          },
          "name": "count",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 27
          },
          "name": "dependsOn",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "cdktf.TerraformResource"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 30
          },
          "name": "lifecycle",
          "optional": true,
          "type": {
            "fqn": "cdktf.TerraformResourceLifecycle"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 29
          },
          "name": "provider",
          "optional": true,
          "type": {
            "fqn": "cdktf.TerraformProvider"
          }
        }
      ]
    },
    "cdktf.TerraformModule": {
      "abstract": true,
      "assembly": "cdktf",
      "base": "cdktf.TerraformElement",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformModule",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/terraform-module.ts",
          "line": 23
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "options",
            "type": {
              "fqn": "cdktf.TerraformModuleOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/terraform-module.ts",
        "line": 17
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-module.ts",
            "line": 44
          },
          "name": "addProvider",
          "parameters": [
            {
              "name": "provider",
              "type": {
                "union": {
                  "types": [
                    {
                      "fqn": "cdktf.TerraformModuleProvider"
                    },
                    {
                      "fqn": "cdktf.TerraformProvider"
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-module.ts",
            "line": 36
          },
          "name": "interpolationForOutput",
          "parameters": [
            {
              "name": "moduleOutput",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-module.ts",
            "line": 32
          },
          "name": "synthesizeAttributes",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-module.ts",
            "line": 51
          },
          "name": "toTerraform",
          "overrides": "cdktf.TerraformElement",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "TerraformModule",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-module.ts",
            "line": 19
          },
          "name": "source",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-module.ts",
            "line": 40
          },
          "name": "providers",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "union": {
                  "types": [
                    {
                      "fqn": "cdktf.TerraformModuleProvider"
                    },
                    {
                      "fqn": "cdktf.TerraformProvider"
                    }
                  ]
                }
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-module.ts",
            "line": 20
          },
          "name": "version",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "cdktf.TerraformModuleOptions": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformModuleOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-module.ts",
        "line": 6
      },
      "name": "TerraformModuleOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-module.ts",
            "line": 7
          },
          "name": "source",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-module.ts",
            "line": 9
          },
          "name": "providers",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "union": {
                  "types": [
                    {
                      "fqn": "cdktf.TerraformModuleProvider"
                    },
                    {
                      "fqn": "cdktf.TerraformProvider"
                    }
                  ]
                }
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-module.ts",
            "line": 8
          },
          "name": "version",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "cdktf.TerraformModuleProvider": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformModuleProvider",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-module.ts",
        "line": 12
      },
      "name": "TerraformModuleProvider",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-module.ts",
            "line": 14
          },
          "name": "moduleAlias",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-module.ts",
            "line": 13
          },
          "name": "provider",
          "type": {
            "fqn": "cdktf.TerraformProvider"
          }
        }
      ]
    },
    "cdktf.TerraformOutput": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformElement",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformOutput",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/terraform-output.ts",
          "line": 19
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.TerraformOutputConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/terraform-output.ts",
        "line": 13
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-output.ts",
            "line": 28
          },
          "name": "synthesizeAttributes",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-output.ts",
            "line": 37
          },
          "name": "toTerraform",
          "overrides": "cdktf.TerraformElement",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "TerraformOutput",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-output.ts",
            "line": 17
          },
          "name": "dependsOn",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "cdktf.TerraformResource"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-output.ts",
            "line": 15
          },
          "name": "description",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-output.ts",
            "line": 16
          },
          "name": "sensitive",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-output.ts",
            "line": 14
          },
          "name": "value",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "string"
                },
                {
                  "primitive": "number"
                },
                {
                  "primitive": "boolean"
                },
                {
                  "collection": {
                    "elementtype": {
                      "primitive": "any"
                    },
                    "kind": "array"
                  }
                },
                {
                  "collection": {
                    "elementtype": {
                      "primitive": "any"
                    },
                    "kind": "map"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "cdktf.TerraformOutputConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformOutputConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-output.ts",
        "line": 6
      },
      "name": "TerraformOutputConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-output.ts",
            "line": 10
          },
          "name": "dependsOn",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "cdktf.TerraformResource"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-output.ts",
            "line": 8
          },
          "name": "description",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-output.ts",
            "line": 9
          },
          "name": "sensitive",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-output.ts",
            "line": 7
          },
          "name": "value",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "string"
                },
                {
                  "primitive": "number"
                },
                {
                  "primitive": "boolean"
                },
                {
                  "collection": {
                    "elementtype": {
                      "primitive": "any"
                    },
                    "kind": "array"
                  }
                },
                {
                  "collection": {
                    "elementtype": {
                      "primitive": "any"
                    },
                    "kind": "map"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "cdktf.TerraformProvider": {
      "abstract": true,
      "assembly": "cdktf",
      "base": "cdktf.TerraformElement",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformProvider",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/terraform-provider.ts",
          "line": 18
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.TerraformProviderConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/terraform-provider.ts",
        "line": 13
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-provider.ts",
            "line": 44
          },
          "name": "synthesizeAttributes",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds this resource to the terraform JSON output."
          },
          "locationInModule": {
            "filename": "lib/terraform-provider.ts",
            "line": 51
          },
          "name": "toTerraform",
          "overrides": "cdktf.TerraformElement",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "TerraformProvider",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provider.ts",
            "line": 35
          },
          "name": "fqn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provider.ts",
            "line": 39
          },
          "name": "metaAttributes",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provider.ts",
            "line": 14
          },
          "name": "terraformResourceType",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provider.ts",
            "line": 15
          },
          "name": "terraformGeneratorMetadata",
          "optional": true,
          "type": {
            "fqn": "cdktf.TerraformGeneratorMetadata"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provider.ts",
            "line": 16
          },
          "name": "terraformProviderSource",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-provider.ts",
            "line": 26
          },
          "name": "alias",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "cdktf.TerraformProviderConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformProviderConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-provider.ts",
        "line": 7
      },
      "name": "TerraformProviderConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provider.ts",
            "line": 8
          },
          "name": "terraformResourceType",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provider.ts",
            "line": 9
          },
          "name": "terraformGeneratorMetadata",
          "optional": true,
          "type": {
            "fqn": "cdktf.TerraformGeneratorMetadata"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provider.ts",
            "line": 10
          },
          "name": "terraformProviderSource",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "cdktf.TerraformRemoteState": {
      "abstract": true,
      "assembly": "cdktf",
      "base": "cdktf.TerraformElement",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformRemoteState",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/terraform-remote-state.ts",
          "line": 12
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "backend",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.DataTerraformRemoteStateConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/terraform-remote-state.ts",
        "line": 11
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-remote-state.ts",
            "line": 32
          },
          "name": "get",
          "parameters": [
            {
              "name": "output",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-remote-state.ts",
            "line": 28
          },
          "name": "getBoolean",
          "parameters": [
            {
              "name": "output",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-remote-state.ts",
            "line": 24
          },
          "name": "getList",
          "parameters": [
            {
              "name": "output",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-remote-state.ts",
            "line": 20
          },
          "name": "getNumber",
          "parameters": [
            {
              "name": "output",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-remote-state.ts",
            "line": 16
          },
          "name": "getString",
          "parameters": [
            {
              "name": "output",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds this resource to the terraform JSON output."
          },
          "locationInModule": {
            "filename": "lib/terraform-remote-state.ts",
            "line": 50
          },
          "name": "toTerraform",
          "overrides": "cdktf.TerraformElement",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "TerraformRemoteState"
    },
    "cdktf.TerraformResource": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformElement",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformResource",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/terraform-resource.ts",
          "line": 54
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.TerraformResourceConfig"
            }
          }
        ]
      },
      "interfaces": [
        "cdktf.ITerraformResource"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/terraform-resource.ts",
        "line": 43
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 79
          },
          "name": "getBooleanAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 75
          },
          "name": "getListAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 71
          },
          "name": "getNumberAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 67
          },
          "name": "getStringAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 122
          },
          "name": "interpolationForAttribute",
          "overrides": "cdktf.ITerraformResource",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 97
          },
          "name": "synthesizeAttributes",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds this resource to the terraform JSON output."
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 104
          },
          "name": "toTerraform",
          "overrides": "cdktf.TerraformElement",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "TerraformResource",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 83
          },
          "name": "fqn",
          "overrides": "cdktf.ITerraformResource",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 87
          },
          "name": "terraformMetaArguments",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 44
          },
          "name": "terraformResourceType",
          "overrides": "cdktf.ITerraformResource",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 45
          },
          "name": "terraformGeneratorMetadata",
          "optional": true,
          "type": {
            "fqn": "cdktf.TerraformGeneratorMetadata"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 50
          },
          "name": "count",
          "optional": true,
          "overrides": "cdktf.ITerraformResource",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 49
          },
          "name": "dependsOn",
          "optional": true,
          "overrides": "cdktf.ITerraformResource",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 52
          },
          "name": "lifecycle",
          "optional": true,
          "overrides": "cdktf.ITerraformResource",
          "type": {
            "fqn": "cdktf.TerraformResourceLifecycle"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 51
          },
          "name": "provider",
          "optional": true,
          "overrides": "cdktf.ITerraformResource",
          "type": {
            "fqn": "cdktf.TerraformProvider"
          }
        }
      ]
    },
    "cdktf.TerraformResourceConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformResourceConfig",
      "interfaces": [
        "cdktf.TerraformMetaArguments"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-resource.ts",
        "line": 38
      },
      "name": "TerraformResourceConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 39
          },
          "name": "terraformResourceType",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 40
          },
          "name": "terraformGeneratorMetadata",
          "optional": true,
          "type": {
            "fqn": "cdktf.TerraformGeneratorMetadata"
          }
        }
      ]
    },
    "cdktf.TerraformResourceLifecycle": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformResourceLifecycle",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-resource.ts",
        "line": 20
      },
      "name": "TerraformResourceLifecycle",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 21
          },
          "name": "createBeforeDestroy",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 23
          },
          "name": "ignoreChanges",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 22
          },
          "name": "preventDestroy",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "cdktf.TerraformStack": {
      "assembly": "cdktf",
      "base": "constructs.Construct",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformStack",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/terraform-stack.ts",
          "line": 23
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/terraform-stack.ts",
        "line": 18
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-stack.ts",
            "line": 32
          },
          "name": "isStack",
          "parameters": [
            {
              "name": "x",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-stack.ts",
            "line": 36
          },
          "name": "of",
          "parameters": [
            {
              "name": "construct",
              "type": {
                "fqn": "constructs.IConstruct"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.TerraformStack"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-stack.ts",
            "line": 54
          },
          "name": "addOverride",
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "any"
              }
            }
          ]
        },
        {
          "docs": {
            "remarks": "By default, uses\nthe `HashedAddressingScheme` but this method can be overridden to customize\nthis behavior.",
            "stability": "experimental",
            "summary": "Returns the naming scheme used to allocate logical IDs."
          },
          "locationInModule": {
            "filename": "lib/terraform-stack.ts",
            "line": 89
          },
          "name": "allocateLogicalId",
          "parameters": [
            {
              "docs": {
                "summary": "The element for which the logical ID is allocated."
              },
              "name": "tfElement",
              "type": {
                "fqn": "cdktf.TerraformElement"
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-stack.ts",
            "line": 104
          },
          "name": "allProviders",
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "fqn": "cdktf.TerraformProvider"
                },
                "kind": "array"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-stack.ts",
            "line": 77
          },
          "name": "getLogicalId",
          "parameters": [
            {
              "name": "tfElement",
              "type": {
                "fqn": "cdktf.TerraformElement"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "remarks": "This method is usually implemented by framework-level constructs such as `Stack` and `Asset`\nas they participate in synthesizing the cloud assembly.",
            "stability": "experimental",
            "summary": "Allows this construct to emit artifacts into the cloud assembly during synthesis."
          },
          "locationInModule": {
            "filename": "lib/terraform-stack.ts",
            "line": 149
          },
          "name": "onSynthesize",
          "overrides": "constructs.Construct",
          "parameters": [
            {
              "name": "session",
              "type": {
                "fqn": "constructs.ISynthesisSession"
              }
            }
          ],
          "protected": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-stack.ts",
            "line": 122
          },
          "name": "toTerraform",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "TerraformStack",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-stack.ts",
            "line": 19
          },
          "name": "artifactFile",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "cdktf.TerraformStackMetadata": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformStackMetadata",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-stack.ts",
        "line": 13
      },
      "name": "TerraformStackMetadata",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-stack.ts",
            "line": 14
          },
          "name": "stackName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-stack.ts",
            "line": 15
          },
          "name": "version",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "cdktf.TerraformVariable": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformElement",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformVariable",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/terraform-variable.ts",
          "line": 84
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.TerraformVariableConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/terraform-variable.ts",
        "line": 79
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 116
          },
          "name": "synthesizeAttributes",
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 124
          },
          "name": "toTerraform",
          "overrides": "cdktf.TerraformElement",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "TerraformVariable",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 104
          },
          "name": "booleanValue",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 100
          },
          "name": "listValue",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 96
          },
          "name": "numberValue",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 92
          },
          "name": "stringValue",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 108
          },
          "name": "value",
          "type": {
            "primitive": "any"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 80
          },
          "name": "default",
          "optional": true,
          "type": {
            "primitive": "any"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 81
          },
          "name": "description",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 82
          },
          "name": "type",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "cdktf.TerraformVariableConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformVariableConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-variable.ts",
        "line": 49
      },
      "name": "TerraformVariableConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 50
          },
          "name": "default",
          "optional": true,
          "type": {
            "primitive": "any"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 51
          },
          "name": "description",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "If no type constraint is set then a value of any type is accepted.\n\nWhile type constraints are optional, we recommend specifying them; they serve as easy reminders for users of the module, and allow Terraform to return a helpful error message if the wrong type is used.\n\nType constraints are created from a mixture of type keywords and type constructors. The supported type keywords are:\n\n- string\n- number\n- bool\n\nThe type constructors allow you to specify complex types such as collections:\n\n- list(\\<TYPE\\>)\n- set(\\<TYPE\\>)\n- map(\\<TYPE\\>)\n- object({\\<ATTR NAME\\> = \\<TYPE\\>, ... })\n- tuple([\\<TYPE\\>, ...])\n\nThe keyword any may be used to indicate that any type is acceptable. For more information on the meaning and behavior of these different types, as well as detailed information about automatic conversion of complex types, see {@link https://www.terraform.io/docs/configuration/types.html|Type Constraints}.\n\nIf both the type and default arguments are specified, the given default value must be convertible to the specified type.",
            "stability": "experimental",
            "summary": "The type argument in a variable block allows you to restrict the type of value that will be accepted as the value for a variable."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 76
          },
          "name": "type",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "cdktf.Testing": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental",
        "summary": "Testing utilities for cdktf applications."
      },
      "fqn": "cdktf.Testing",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/testing.ts",
        "line": 13
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns an app for testing with the following properties: - Output directory is a temp dir."
          },
          "locationInModule": {
            "filename": "lib/testing.ts",
            "line": 18
          },
          "name": "app",
          "returns": {
            "type": {
              "fqn": "cdktf.App"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/testing.ts",
            "line": 29
          },
          "name": "enableFutureFlags",
          "parameters": [
            {
              "name": "app",
              "type": {
                "fqn": "cdktf.App"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.App"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/testing.ts",
            "line": 24
          },
          "name": "stubVersion",
          "parameters": [
            {
              "name": "app",
              "type": {
                "fqn": "cdktf.App"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.App"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns the Terraform synthesized JSON."
          },
          "locationInModule": {
            "filename": "lib/testing.ts",
            "line": 38
          },
          "name": "synth",
          "parameters": [
            {
              "name": "stack",
              "type": {
                "fqn": "cdktf.TerraformStack"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        }
      ],
      "name": "Testing"
    },
    "cdktf.Token": {
      "assembly": "cdktf",
      "docs": {
        "remarks": "Can be used to delay evaluation of a certain value in case, for example,\nthat it requires some context or late-bound data. Can also be used to\nmark values that need special processing at document rendering time.\n\nTokens can be embedded into strings while retaining their original\nsemantics.",
        "stability": "experimental",
        "summary": "Represents a special or lazily-evaluated value."
      },
      "fqn": "cdktf.Token",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/tokens/token.ts",
        "line": 21
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Return a resolvable representation of the given value."
          },
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 75
          },
          "name": "asAny",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Return a reversible list representation of this token."
          },
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 67
          },
          "name": "asList",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "any"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "cdktf.EncodingOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Return a reversible number representation of this token."
          },
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 59
          },
          "name": "asNumber",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "If the Token is initialized with a literal, the stringified value of the\nliteral is returned. Otherwise, a special quoted string representation\nof the Token is returned that can be embedded into other strings.\n\nStrings with quoted Tokens in them can be restored back into\ncomplex values with the Tokens restored by calling `resolve()`\non the string.",
            "stability": "experimental",
            "summary": "Return a reversible string representation of this token."
          },
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 51
          },
          "name": "asString",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "any"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "cdktf.EncodingOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "One of these must be true:\n\n- `obj` is an IResolvable\n- `obj` is a string containing at least one encoded `IResolvable`\n- `obj` is either an encoded number or list\n\nThis does NOT recurse into lists or objects to see if they\ncontaining resolvables.",
            "stability": "experimental",
            "summary": "Returns true if obj represents an unresolved value."
          },
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 36
          },
          "name": "isUnresolved",
          "parameters": [
            {
              "docs": {
                "summary": "The object to test."
              },
              "name": "obj",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          },
          "static": true
        }
      ],
      "name": "Token"
    },
    "cdktf.Tokenization": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental",
        "summary": "Less oft-needed functions to manipulate Tokens."
      },
      "fqn": "cdktf.Tokenization",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/tokens/token.ts",
        "line": 83
      },
      "methods": [
        {
          "docs": {
            "remarks": "This is different from Token.isUnresolved() which will also check for\nencoded Tokens, whereas this method will only do a type check on the given\nobject.",
            "stability": "experimental",
            "summary": "Return whether the given object is an IResolvable object."
          },
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 127
          },
          "name": "isResolvable",
          "parameters": [
            {
              "name": "obj",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "Values can only be primitives, arrays or tokens. Other objects (i.e. with methods) will be rejected.",
            "stability": "experimental",
            "summary": "Resolves an object by evaluating all tokens and removing any undefined or empty objects or arrays."
          },
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 112
          },
          "name": "resolve",
          "parameters": [
            {
              "docs": {
                "summary": "The object to resolve."
              },
              "name": "obj",
              "type": {
                "primitive": "any"
              }
            },
            {
              "docs": {
                "summary": "Prefix key path components for diagnostics."
              },
              "name": "options",
              "type": {
                "fqn": "cdktf.ResolveOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Un-encode a Tokenized value from a list."
          },
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 101
          },
          "name": "reverseList",
          "parameters": [
            {
              "name": "l",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Un-encode a Tokenized value from a number."
          },
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 94
          },
          "name": "reverseNumber",
          "parameters": [
            {
              "name": "n",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Un-encode a string potentially containing encoded tokens."
          },
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 87
          },
          "name": "reverseString",
          "parameters": [
            {
              "name": "s",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.TokenizedStringFragments"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "If it is an object (i.e., { Ref: 'SomeLogicalId' }), return it as-is.",
            "stability": "experimental",
            "summary": "Stringify a number directly or lazily if it's a Token."
          },
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 134
          },
          "name": "stringifyNumber",
          "parameters": [
            {
              "name": "x",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        }
      ],
      "name": "Tokenization"
    },
    "cdktf.TokenizedStringFragments": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental",
        "summary": "Fragments of a concatenated string containing stringified Tokens."
      },
      "fqn": "cdktf.TokenizedStringFragments",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/tokens/string-fragments.ts",
        "line": 20
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds an intrinsic fragment."
          },
          "locationInModule": {
            "filename": "lib/tokens/string-fragments.ts",
            "line": 66
          },
          "name": "addIntrinsic",
          "parameters": [
            {
              "docs": {
                "summary": "the intrinsic value to add."
              },
              "name": "value",
              "type": {
                "primitive": "any"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds a literal fragment."
          },
          "locationInModule": {
            "filename": "lib/tokens/string-fragments.ts",
            "line": 50
          },
          "name": "addLiteral",
          "parameters": [
            {
              "docs": {
                "summary": "the literal to add."
              },
              "name": "lit",
              "type": {
                "primitive": "any"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds a token fragment."
          },
          "locationInModule": {
            "filename": "lib/tokens/string-fragments.ts",
            "line": 58
          },
          "name": "addToken",
          "parameters": [
            {
              "docs": {
                "summary": "the token to add."
              },
              "name": "token",
              "type": {
                "fqn": "cdktf.IResolvable"
              }
            }
          ]
        },
        {
          "docs": {
            "remarks": "If there are any",
            "stability": "experimental",
            "summary": "Combine the string fragments using the given joiner."
          },
          "locationInModule": {
            "filename": "lib/tokens/string-fragments.ts",
            "line": 117
          },
          "name": "join",
          "parameters": [
            {
              "name": "concat",
              "type": {
                "fqn": "cdktf.IFragmentConcatenator"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Apply a transformation function to all tokens in the string."
          },
          "locationInModule": {
            "filename": "lib/tokens/string-fragments.ts",
            "line": 86
          },
          "name": "mapTokens",
          "parameters": [
            {
              "name": "mapper",
              "type": {
                "fqn": "cdktf.ITokenMapper"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.TokenizedStringFragments"
            }
          }
        }
      ],
      "name": "TokenizedStringFragments",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns the first value."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/string-fragments.ts",
            "line": 35
          },
          "name": "firstValue",
          "type": {
            "primitive": "any"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns the number of fragments."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/string-fragments.ts",
            "line": 42
          },
          "name": "length",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Return all Tokens from this string."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/string-fragments.ts",
            "line": 73
          },
          "name": "tokens",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "cdktf.IResolvable"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns the first token."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/string-fragments.ts",
            "line": 26
          },
          "name": "firstToken",
          "optional": true,
          "type": {
            "fqn": "cdktf.IResolvable"
          }
        }
      ]
    },
    "cdktf.VariableType": {
      "abstract": true,
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.VariableType",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/terraform-variable.ts",
        "line": 6
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 28
          },
          "name": "list",
          "parameters": [
            {
              "name": "type",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 32
          },
          "name": "map",
          "parameters": [
            {
              "name": "type",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 44
          },
          "name": "object",
          "parameters": [
            {
              "name": "attributes",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 36
          },
          "name": "set",
          "parameters": [
            {
              "name": "type",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 40
          },
          "name": "tuple",
          "parameters": [
            {
              "name": "elements",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true,
          "variadic": true
        }
      ],
      "name": "VariableType",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 10
          },
          "name": "ANY",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 9
          },
          "name": "BOOL",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 12
          },
          "name": "LIST",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 18
          },
          "name": "LIST_BOOL",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 17
          },
          "name": "LIST_NUMBER",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 16
          },
          "name": "LIST_STRING",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 13
          },
          "name": "MAP",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 22
          },
          "name": "MAP_BOOL",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 21
          },
          "name": "MAP_NUMBER",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 20
          },
          "name": "MAP_STRING",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 8
          },
          "name": "NUMBER",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 14
          },
          "name": "SET",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 26
          },
          "name": "SET_BOOL",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 25
          },
          "name": "SET_NUMBER",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 24
          },
          "name": "SET_STRING",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 7
          },
          "name": "STRING",
          "static": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    }
  },
  "version": "0.0.18",
  "fingerprint": "w5v0z99lBcakGYaHik+VXK0knJMHtrqmwP9HITWALaE="
}
